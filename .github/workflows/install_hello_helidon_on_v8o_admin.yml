name: Install hello-helidon app on Verrzzano admin cluster
on:
  workflow_call:
    inputs:
      CLUSTER_NAME:
        required: true
        type: string
    secrets:
      OCI_REGION:
        required: false
jobs:
  install_hello_helidon:
    runs-on: ubuntu-latest
    steps:
      - name: Write Config & Key Files
        run: |
          mkdir ~/.oci
          echo "[DEFAULT]" >> ~/.oci/config
          echo "user=${{secrets.OCI_USER_OCID}}" >> ~/.oci/config
          echo "fingerprint=${{secrets.OCI_FINGERPRINT}}" >> ~/.oci/config
          echo "region=${{secrets.OCI_REGION}}" >> ~/.oci/config
          echo "tenancy=${{secrets.OCI_TENANCY_OCID}}" >> ~/.oci/config
          echo "key_file=~/.oci/key.pem" >> ~/.oci/config
          echo "${{secrets.OCI_KEY_FILE}}" >> ~/.oci/key.pem
          
      - name: Install OCI CLI
        run: |
          curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          ./install.sh --accept-all-defaults
          echo "/home/runner/bin" >> $GITHUB_PATH
          exec -l $SHELL
          
      - name: 'Fix Config File Permissions'
        run: |
          oci setup repair-file-permissions --file ~/.oci/config
          oci setup repair-file-permissions --file ~/.oci/key.pem
          
      - name: Config KUBECONFIG
        run: |
          echo "Getting Compartment ID"
          CMD="oci iam compartment list \
            --compartment-id-in-subtree TRUE \
            --all \
            --query 'data[?\"name\"==\`COMPARTMENT_NAME\`].id'"
          CMD=$(sed -e "s/\COMPARTMENT_NAME/${{secrets.COMPARTMENT_NAME}}/g" <<< $CMD)
          COMPARTMENT_ID=$(eval $(echo "$CMD | grep ocid | sed 's/\"//g' | sed 's/ //g'"))
          echo "COMPARTMENT_ID=${COMPARTMENT_ID}" >> $GITHUB_ENV
          
          echo "Retrieve OKE cluster ID"
          CMD="oci ce cluster list \
            --compartment-id $COMPARTMENT_ID \
            --query 'data[?\"name\"==\`CLUSTER_NAME\` && \"lifecycle-state\"!=\`DELETED\`].id'"
          CMD=$(sed -e "s/\CLUSTER_NAME/${{inputs.CLUSTER_NAME}}/g" <<< $CMD)
          CLUSTER_ID=$(eval $(echo "$CMD | grep ocid | sed 's/\"//g' | sed 's/ //g'"))
          echo "CLUSTER_ID=${CLUSTER_ID}" >> $GITHUB_ENV

          mkdir ~/k8s_dir
          KUBECONFIG_FILE=/home/runner/k8s_dir/${{inputs.CLUSTER_NAME}}.conf
          rm -rf $KUBECONFIG_FILE

          oci ce cluster create-kubeconfig \
            --cluster-id $CLUSTER_ID \
            --file $KUBECONFIG_FILE \
            --region ${{secrets.OCI_REGION}} \
            --token-version 2.0.0 \
            --kube-endpoint PUBLIC_ENDPOINT

          KUBECONFIG=$KUBECONFIG_FILE
          echo "KUBECONFIG=${KUBECONFIG}" >> $GITHUB_ENV

          export KUBECONFIG=$KUBECONFIG
          kubectl version 
          kubectl get nodes -o wide
          
      - name: Deploy Hello-Helidon on V8o
        run: |
          export KUBECONFIG=$KUBECONFIG
          echo "Deploy hello-helidon sample application on Verrazzano"

          kubectl create namespace hello-helidon
          kubectl label namespace hello-helidon verrazzano-managed=true istio-injection=enabled
          kubectl apply -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/hello-helidon/hello-helidon-comp.yaml
          kubectl apply -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/hello-helidon/hello-helidon-app.yaml

          sleep 10

          kubectl wait --for=condition=Ready pods --all -n hello-helidon --timeout=300s

          sleep 10
          kubectl wait --for=condition=Ready pods --all -n hello-helidon --timeout=300s

          HOST=$( \
            kubectl get gateway hello-helidon-hello-helidon-appconf-gw \
              -n hello-helidon \
              -o jsonpath='{.spec.servers[0].hosts[0]}' \
          )
          echo "HOST=${HOST}" >> $GITHUB_ENV

          curl -sk -X GET "https://${HOST}/greet" | grep "Hello World"
          result=$?

          if [ "${result}" != "0" ];
          then
              echo "Error deploying hello-helidon on Verrazzano!!!"
              exit 1
          fi

          echo "========================================================="
          echo "hello-helidon sample deployed on Verrazzano successfully!"
          echo "========================================================="
