name: Register managed cluster with admin cluster
on: [push]    
jobs:
  register_managed_cluster:
    runs-on: ubuntu-latest
    steps:
      - name: Write Config & Key Files
        run: |
          mkdir ~/.oci
          echo "[DEFAULT]" >> ~/.oci/config
          echo "user=${{secrets.OCI_USER_OCID}}" >> ~/.oci/config
          echo "fingerprint=${{secrets.OCI_FINGERPRINT}}" >> ~/.oci/config
          echo "region=${{secrets.OCI_REGION}}" >> ~/.oci/config
          echo "tenancy=${{secrets.OCI_TENANCY_OCID}}" >> ~/.oci/config
          echo "key_file=~/.oci/key.pem" >> ~/.oci/config
          echo "${{secrets.OCI_KEY_FILE}}" >> ~/.oci/key.pem
      - name: Install OCI CLI
        run: |
          curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          ./install.sh --accept-all-defaults
          echo "/home/runner/bin" >> $GITHUB_PATH
          exec -l $SHELL
      - name: 'Fix Config File Permissions'
        run: |
          oci setup repair-file-permissions --file ~/.oci/config
          oci setup repair-file-permissions --file ~/.oci/key.pem
      - name: Setup KUBECONFIG
        run: |
          echo "Getting Compartment ID"
          CMD="oci iam compartment list \
            --compartment-id-in-subtree TRUE \
            --all \
            --query 'data[?\"name\"==\`COMPARTMENT_NAME\`].id'"
          CMD=$(sed -e "s/\COMPARTMENT_NAME/${{secrets.COMPARTMENT_NAME}}/g" <<< $CMD)
          COMPARTMENT_ID=$(eval $(echo "$CMD | grep ocid | sed 's/\"//g' | sed 's/ //g'"))
          echo "COMPARTMENT_ID=${COMPARTMENT_ID}" >> $GITHUB_ENV
          
          echo "Retrieve OKE Admin cluster ID"
          CMD="oci ce cluster list \
            --compartment-id $COMPARTMENT_ID \
            --query 'data[?\"name\"==\`CLUSTER_NAME\` && \"lifecycle-state\"!=\`DELETED\`].id'"
          CMD=$(sed -e "s/\CLUSTER_NAME/${{secrets.CLUSTER_NAME}}/g" <<< $CMD)
          CLUSTER_ID=$(eval $(echo "$CMD | grep ocid | sed 's/\"//g' | sed 's/ //g'"))
          echo "CLUSTER_ID=${CLUSTER_ID}" >> $GITHUB_ENV
          mkdir ~/k8s_dir
          KUBECONFIG_ADMIN=/home/runner/k8s_dir/${{secrets.CLUSTER_NAME}}.conf
          rm -rf $KUBECONFIG_ADMIN
          oci ce cluster create-kubeconfig \
            --cluster-id $CLUSTER_ID \
            --file $KUBECONFIG_ADMIN \
            --region ${{secrets.OCI_REGION}} \
            --token-version 2.0.0 \
            --kube-endpoint PUBLIC_ENDPOINT
          KUBECONFIG=$KUBECONFIG_ADMIN
          echo "KUBECONFIG=${KUBECONFIG}" >> $GITHUB_ENV
          echo "KUBECONFIG_ADMIN=${KUBECONFIG_ADMIN}" >> $GITHUB_ENV
          KUBECONFIG=$KUBECONFIG_ADMIN kubectl version 
          KUBECONFIG=$KUBECONFIG_ADMIN kubectl get nodes

          echo "Retrieve OKE Managed cluster ID"
          CMD="oci ce cluster list \
            --compartment-id $COMPARTMENT_ID \
            --query 'data[?\"name\"==\`CLUSTER_NAME\` && \"lifecycle-state\"!=\`DELETED\`].id'"
          CMD=$(sed -e "s/\CLUSTER_NAME/${{secrets.OKE_MANAGED_CLUSTER_NAME}}/g" <<< $CMD)
          CLUSTER_ID=$(eval $(echo "$CMD | grep ocid | sed 's/\"//g' | sed 's/ //g'"))
          echo "CLUSTER_ID=${CLUSTER_ID}" >> $GITHUB_ENV
          KUBECONFIG_MANAGED1=/home/runner/k8s_dir/${{secrets.OKE_MANAGED_CLUSTER_NAME}}.conf
          rm -rf $KUBECONFIG_MANAGED1
          oci ce cluster create-kubeconfig \
            --cluster-id $CLUSTER_ID \
            --file $KUBECONFIG_MANAGED1 \
            --region ${{secrets.OCI_REGION}} \
            --token-version 2.0.0 \
            --kube-endpoint PUBLIC_ENDPOINT
          KUBECONFIG=$KUBECONFIG_MANAGED1
          echo "KUBECONFIG=${KUBECONFIG}" >> $GITHUB_ENV
          echo "KUBECONFIG_MANAGED1=${KUBECONFIG_MANAGED1}" >> $GITHUB_ENV
          KUBECONFIG=$KUBECONFIG_MANAGED1 kubectl version 
          KUBECONFIG=$KUBECONFIG_MANAGED1 kubectl get nodes
          
      - name: Preregistration setup
        run: |
          KUBECONFIG=$KUBECONFIG_ADMIN kubectl get verrazzano
          KUBECONFIG=$KUBECONFIG_MANAGED1 kubectl get verrazzano
          
          KUBECONFIG=$KUBECONFIG_MANAGED1 MGD_CA_CERT=$(kubectl get secret system-tls \
               -n verrazzano-system \
               -o jsonpath="{.data.ca\.crt}" | base64 --decode)
          echo "MGD_CA_CERT=${MGD_CA_CERT}" >> $GITHUB_ENV

          if [ -z "${MGD_CA_CERT}" ];
          then
            echo "Certificates signed by a well-known certificate authority"
            echo "Follow steps mentioned at https://verrazzano.io/docs/setup/install/multicluster/#tab21"
            exit 1
          fi
          
          KUBECONFIG=$KUBECONFIG_MANAGED1 kubectl create secret generic "ca-secret-managed1" \
            -n verrazzano-mc \
            --from-literal=cacrt="$MGD_CA_CERT" \
            --dry-run=client \
            -o yaml > managed1.yaml

          KUBECONFIG=$KUBECONFIG_ADMIN kubectl apply -f managed1.yaml
          
          rm managed1.yaml
          
          KUBECONFIG=$KUBECONFIG_ADMIN ADMIN_K8S_SERVER_ADDRESS=$(kubectl config view --minify | grep 'https' | awk '{print $2}')
          echo "ADMIN_K8S_SERVER_ADDRESS=${ADMIN_K8S_SERVER_ADDRESS}" >> $GITHUB_ENV
          
          KUBECONFIG=$KUBECONFIG_ADMIN kubectl apply -f <<EOF -
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: verrazzano-admin-cluster
            namespace: verrazzano-mc
          data:
            server: "${ADMIN_K8S_SERVER_ADDRESS}"
          EOF
          
          echo "KUBECONFIG_ADMIN=${KUBECONFIG_ADMIN}" >> $GITHUB_ENV
          echo "KUBECONFIG_MANAGED1=${KUBECONFIG_MANAGED1}" >> $GITHUB_ENV
          
      - name: Registering Managed Cluster
        run: |
          KUBECONFIG=$KUBECONFIG_ADMIN kubectl apply -f <<EOF -
          apiVersion: clusters.verrazzano.io/v1alpha1
          kind: VerrazzanoManagedCluster
          metadata:
            name: managed1
            namespace: verrazzano-mc
          spec:
            description: "Test VerrazzanoManagedCluster object"
            caSecret: ca-secret-managed1
          EOF
          
          KUBECONFIG=$KUBECONFIG_ADMIN kubectl wait --for=condition=Ready vmc managed1 -n verrazzano-mc
          
          KUBECONFIG=$KUBECONFIG_ADMIN \
            kubectl get secret verrazzano-cluster-managed1-manifest -n verrazzano-mc -o jsonpath={.data.yaml} \
            | base64 --decode > register.yaml
          
          KUBECONFIG=$KUBECONFIG_MANAGED1 kubectl apply -f register.yaml
          
          rm register.yaml
          
          echo "Verify whether managed cluster registration completed successfully"
          KUBECONFIG=$KUBECONFIG_ADMIN kubectl get vmc managed1 -n verrazzano-mc -o yaml
          
          KUBECONFIG=$KUBECONFIG_ADMIN VZ_CONSOLE_URL=$(kubectl get ingress -n verrazzano-system 2>&1 | grep verrazzano-ingress | awk {'print $3'})
          echo "VZ_CONSOLE_URL=${VZ_CONSOLE_URL}" >> $GITHUB_ENV
          
          KUBECONFIG=$KUBECONFIG_ADMIN VZ_REGISTRATION_URL=$(kubectl get vmc managed1 -n verrazzano-mc -o yaml | grep 'apiUrl' | awk '{print $2}')
          echo "VZ_REGISTRATION_URL=${VZ_REGISTRATION_URL}" >> $GITHUB_ENV

          if [ "${VZ_REGISTRATION_URL}"=="${VZ_CONSOLE_URL}" ];
          then
            echo "Error in registering Managed cluster with Admin cluster"
            exit 1
          fi
          
          echo "Managed cluster has been registered successfully with Admin cluster"

