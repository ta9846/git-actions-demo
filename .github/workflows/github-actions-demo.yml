name: GitHub Actions Demo
on: [push]
jobs:
  test_curl:
    runs-on: ubuntu-latest
    steps:
      - name: Invoke curl
        run: |
          VZ_CONSOLE_URL=${{secrets.VZ_CONSOLE_URL}}
          echo "vz_console_url: $VZ_CONSOLE_URL"

          VZ_CONSOLE_STATUS=$(curl -k -s -I https://${VZ_CONSOLE_URL} | awk {'print $2'} | head -n 1)

          echo "VZ_CONSOLE_STATUS=${VZ_CONSOLE_STATUS}" >> $GITHUB_ENV
          echo "vz_console_status: $VZ_CONSOLE_STATUS"
          if [ "${VZ_CONSOLE_STATUS}" != "200" ];
          then
            echo "Error getting Verrazzano console!!!"
            #exit 1
          fi
          echo "Verrazzano console is available at https://${VZ_CONSOLE_URL}"
          
      - name: Write Config & Key Files
        run: |
          mkdir ~/.oci
          echo "[DEFAULT]" >> ~/.oci/config
          echo "user=${{secrets.OCI_USER_OCID}}" >> ~/.oci/config
          echo "fingerprint=${{secrets.OCI_FINGERPRINT}}" >> ~/.oci/config
          echo "region=${{secrets.OCI_REGION}}" >> ~/.oci/config
          echo "tenancy=${{secrets.OCI_TENANCY_OCID}}" >> ~/.oci/config
          echo "key_file=~/.oci/key.pem" >> ~/.oci/config
          echo "${{secrets.OCI_KEY_FILE}}" >> ~/.oci/key.pem
          
      - name: Install OCI CLI
        run: |
          curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          ./install.sh --accept-all-defaults
          echo "/home/runner/bin" >> $GITHUB_PATH
          exec -l $SHELL
          
      - name: 'Fix Config File Permissions'
        run: |
          oci setup repair-file-permissions --file ~/.oci/config
          oci setup repair-file-permissions --file ~/.oci/key.pem

      - name: Config KUBECONFIG
        run: |
          echo "Getting Compartment ID"
          CMD="oci iam compartment list \
            --compartment-id-in-subtree TRUE \
            --all \
            --query 'data[?\"name\"==\`COMPARTMENT_NAME\`].id'"
          CMD=$(sed -e "s/\COMPARTMENT_NAME/${{secrets.COMPARTMENT_NAME}}/g" <<< $CMD)
          COMPARTMENT_ID=$(eval $(echo "$CMD | grep ocid | sed 's/\"//g' | sed 's/ //g'"))
          echo "COMPARTMENT_ID=${COMPARTMENT_ID}" >> $GITHUB_ENV
          
          echo "Retrieve OKE cluster ID"
          CMD="oci ce cluster list \
            --compartment-id $COMPARTMENT_ID \
            --query 'data[?\"name\"==\`CLUSTER_NAME\` && \"lifecycle-state\"!=\`DELETED\`].id'"
          CMD=$(sed -e "s/\CLUSTER_NAME/${{secrets.CLUSTER_NAME}}/g" <<< $CMD)
          CLUSTER_ID=$(eval $(echo "$CMD | grep ocid | sed 's/\"//g' | sed 's/ //g'"))
          echo "CLUSTER_ID=${CLUSTER_ID}" >> $GITHUB_ENV
          mkdir ~/k8s_dir
          KUBECONFIG_FILE=/home/runner/k8s_dir/${{secrets.CLUSTER_NAME}}.conf
          rm -rf $KUBECONFIG_FILE
          oci ce cluster create-kubeconfig \
            --cluster-id $CLUSTER_ID \
            --file $KUBECONFIG_FILE \
            --region ${{secrets.OCI_REGION}} \
            --token-version 2.0.0 \
            --kube-endpoint PUBLIC_ENDPOINT
          KUBECONFIG=$KUBECONFIG_FILE
          echo "KUBECONFIG=${KUBECONFIG}" >> $GITHUB_ENV
          export KUBECONFIG=$KUBECONFIG
          kubectl version 
          kubectl get nodes -o wide
          
      - name: Test Git Clone
        run: |
          echo $(pwd)
          cd /home/runner
          git clone https://github.com/verrazzano/verrazzano.git
          ls
          cd verrazzano/platform-operator/scripts/install
          ls
          export KUBECONFIG=$KUBECONFIG
          export KUBE_CONTEXT=$(kubectl config get-contexts -o=name)
          echo "KUBE_CONTEXT=${KUBE_CONTEXT}" >> $GITHUB_ENV
          echo "Current kube context===> $KUBE_CONTEXT"
          #./create_oci_config_secret.sh -o ~/.oci/config -s DEFAULT -k oci -c $KUBE_CONTEXT
          
          #sleep 10
          kubectl get secrets

