name: GitHub Actions Demo
on: [push]
jobs:
  create_oke_cluster:
    runs-on: ubuntu-latest
    steps:
      - name: Write Config & Key Files
        run: |
          mkdir ~/.oci
          echo "[DEFAULT]" >> ~/.oci/config
          echo "user=${{secrets.OCI_USER_OCID}}" >> ~/.oci/config
          echo "fingerprint=${{secrets.OCI_FINGERPRINT}}" >> ~/.oci/config
          echo "region=${{secrets.OCI_REGION}}" >> ~/.oci/config
          echo "tenancy=${{secrets.OCI_TENANCY_OCID}}" >> ~/.oci/config
          echo "key_file=~/.oci/key.pem" >> ~/.oci/config
          echo "${{secrets.OCI_KEY_FILE}}" >> ~/.oci/key.pem
      - name: Write VCN Security List Files
        run: |
          mkdir ~/seclist
          echo "${{secrets.API_ENDPOINT_SEC_LIST_INGRESS_DATA}}" >> ~/seclist/api_endpoint_sec_list_ingress.json
          echo "${{secrets.API_ENDPOINT_SEC_LIST_EGRESS_DATA}}" >> ~/seclist/api_endpoint_sec_list_egress.json
          echo "${{secrets.NODE_SEC_LIST_INGRESS_DATA}}" >> ~/seclist/node_sec_list_ingress.json
          echo "${{secrets.NODE_SEC_LIST_EGRESS_DATA}}" >> ~/seclist/node_sec_list_egress.json
      - name: Install OCI CLI
        run: |
          curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          ./install.sh --accept-all-defaults
          echo "/home/runner/bin" >> $GITHUB_PATH
          exec -l $SHELL
      - name: 'Fix Config File Permissions'
        run: |
          oci setup repair-file-permissions --file ~/.oci/config
          oci setup repair-file-permissions --file ~/.oci/key.pem
      - name: Setting up Virtual Cloud Network (VCN)
        run: |
          echo "Setting up Virtual Cloud Network (VCN)"
          
          echo "Getting Compartment ID"
          CMD="oci iam compartment list \
            --compartment-id-in-subtree TRUE \
            --all \
            --query 'data[?\"name\"==\`COMPARTMENT_NAME\`].id'"            
          CMD=$(sed -e "s/\COMPARTMENT_NAME/${{secrets.COMPARTMENT_NAME}}/g" <<< $CMD)
          COMPARTMENT_ID=$(eval $(echo "$CMD | grep ocid | sed 's/\"//g' | sed 's/ //g'"))
          echo "COMPARTMENT_ID=${COMPARTMENT_ID}" >> $GITHUB_ENV
          
          echo "Create VCN"
          VCN_ID=$( \
            oci network vcn create \
              --compartment-id ${COMPARTMENT_ID} \
              --cidr-block 10.0.0.0/16 \
              --display-name ${{secrets.VCN_NAME}} \
              --dns-label ${{secrets.DNS_LABEL}} \
              --query data.id \
              --raw-output \
          )
          echo "VCN_ID=${VCN_ID}" >> $GITHUB_ENV
          
          echo "Create Internet Gateway"
          IGW_ID=$( \
            oci network internet-gateway create \
              --compartment-id $COMPARTMENT_ID \
              --vcn-id $VCN_ID \
              --is-enabled true \
              --display-name internet-gateway-oke \
              --query data.id \
              --raw-output \
          )
          echo "IGW_ID=${IGW_ID}" >> $GITHUB_ENV

          echo "Retrieve default Route table of the VCN"
          DRT="Default Route Table for "
          CMD="oci network route-table list \
            --compartment-id $COMPARTMENT_ID \
            --vcn-id $VCN_ID \
            --query 'data[?\"display-name\"==\`DEFAULT_ROUTE_TABLE_NAME\`].id'"
          CMD=$(sed -e "s/\DEFAULT_ROUTE_TABLE_NAME/${DRT}${{secrets.VCN_NAME}}/g" <<< $CMD)
          DEF_ROUTE_TABLE_ID=$(eval $(echo "$CMD | grep ocid | sed 's/\"//g' | sed 's/ //g' | sed 's/,//g'"))
          echo "DEF_ROUTE_TABLE_ID=${DEF_ROUTE_TABLE_ID}" >> $GITHUB_ENV

          echo "Update Default Route table with Internet Gateway"
          CMD="oci network route-table update \
            --rt-id ${DEF_ROUTE_TABLE_ID} \
            --route-rules '[{\"cidrBlock\":\"0.0.0.0/0\",\"networkEntityId\":\"IGW_ID\"}]' \
            --force"
          CMD=$(sed -e "s/\IGW_ID/${IGW_ID}/g" <<< $CMD)
          eval $(echo $CMD)

          echo "Create Security Ingress / Egress Rules for API Endpoint, Nodes and LB"
          oci network security-list create \
            --compartment-id $COMPARTMENT_ID \
            --vcn-id $VCN_ID \
            --display-name api-endpoint-sec-list \
            --ingress-security-rules file:///home/runner/seclist/api_endpoint_sec_list_ingress.json \
            --egress-security-rules file:///home/runner/seclist/api_endpoint_sec_list_egress.json

          API_ENDPOINT_SEC_LIST_ID=$( \
            oci network security-list list \
              --compartment-id $COMPARTMENT_ID \
              --vcn-id $VCN_ID \
              --query 'data[?"display-name"==`api-endpoint-sec-list`].id' | \
                grep ocid | \
                sed 's/"//g' | \
                sed 's/ //g' | \
                sed 's/,//g' \
          )
          echo "API_ENDPOINT_SEC_LIST_ID=${API_ENDPOINT_SEC_LIST_ID}" >> $GITHUB_ENV

          oci network security-list create \
            --compartment-id $COMPARTMENT_ID \
            --vcn-id $VCN_ID \
            --display-name node-sec-list \
            --ingress-security-rules file:///home/runner/seclist/node_sec_list_ingress.json \
            --egress-security-rules file:///home/runner/seclist/node_sec_list_egress.json
            
          NODE_SEC_LIST_ID=$( \
            oci network security-list list \
              --compartment-id $COMPARTMENT_ID \
              --vcn-id $VCN_ID \
              --query 'data[?"display-name"==`node-sec-list`].id' | \
                grep ocid | \
                sed 's/"//g' | \
                sed 's/ //g' | \
                sed 's/,//g' \
          )
          echo "NODE_SEC_LIST_ID=${NODE_SEC_LIST_ID}" >> $GITHUB_ENV

          oci network security-list create \
            --compartment-id $COMPARTMENT_ID \
            --vcn-id $VCN_ID \
            --display-name svc-lb-sec-list \
            --ingress-security-rules '[]' \
            --egress-security-rules '[]'
            
          LB_SEC_LIST_ID=$( \
            oci network security-list list \
              --compartment-id $COMPARTMENT_ID \
              --vcn-id $VCN_ID \
              --query 'data[?"display-name"==`svc-lb-sec-list`].id' | \
                grep ocid | \
                sed 's/"//g' | \
                sed 's/ //g' | \
                sed 's/,//g'
          )
          echo "LB_SEC_LIST_ID=${LB_SEC_LIST_ID}" >> $GITHUB_ENV
          
          echo "Create Subnet for API Endpoints"
          CMD="oci network subnet create 
            --compartment-id $COMPARTMENT_ID \
            --vcn-id $VCN_ID  \
            --display-name public-api-endpoint-subnet \
            --cidr-block 10.0.0.0/28 \
            --route-table-id $DEF_ROUTE_TABLE_ID \
            --security-list-ids '[\"API_ENDPOINT_SEC_LIST_ID\"]' \
            --query data.id \
            --raw-output"
          CMD=$(sed -e "s/\API_ENDPOINT_SEC_LIST_ID/${API_ENDPOINT_SEC_LIST_ID}/g" <<< $CMD)
          PUBLIC_SUBNET_ID=$(eval $(echo "$CMD"))
          echo "PUBLIC_SUBNET_ID=${PUBLIC_SUBNET_ID}" >> $GITHUB_ENV

          echo "Create Subnet for Nodes"
          CMD="oci network subnet create 
            --compartment-id $COMPARTMENT_ID \
            --vcn-id $VCN_ID \
            --display-name node-subnet \
            --cidr-block 10.0.10.0/24 \
            --route-table-id $DEF_ROUTE_TABLE_ID \
            --security-list-ids '[\"NODE_SEC_LIST_ID\"]' \
            --query data.id \
            --raw-output"
          CMD=$(sed -e "s/\NODE_SEC_LIST_ID/${NODE_SEC_LIST_ID}/g" <<< $CMD)
          NODE_SUBNET_ID=$(eval $(echo "$CMD"))
          echo "NODE_SUBNET_ID=${NODE_SUBNET_ID}" >> $GITHUB_ENV
          
          echo "Create Subnet for LoadBalancer"
          CMD="oci network subnet create \
            --compartment-id $COMPARTMENT_ID \
            --vcn-id $VCN_ID  \
            --display-name svc-lb-subnet \
            --cidr-block 10.0.20.0/24 \
            --route-table-id $DEF_ROUTE_TABLE_ID \
            --security-list-ids '[\"LB_SEC_LIST_ID\"]' \
            --query data.id \
            --raw-output"
          CMD=$(sed -e "s/\LB_SEC_LIST_ID/${LB_SEC_LIST_ID}/g" <<< $CMD)
          SVC_LB_SUBNET_ID=$(eval $(echo "$CMD"))
          echo "SVC_LB_SUBNET_ID=${SVC_LB_SUBNET_ID}" >> $GITHUB_ENV
          
          echo "Create DHCP option with Internet and VCN resolver"
          oci network dhcp-options create \
            --compartment-id $COMPARTMENT_ID \
            --vcn-id $VCN_ID \
            --options  '[{"type": "DomainNameServer", "customDnsServers": [], "serverType": "VcnLocalPlusInternet"}]'          
            
      - name: Setting up OKE Cluster
        run: |          
          echo "Create OKE Cluster"
          CMD="oci ce cluster create \
            --compartment-id $COMPARTMENT_ID \
            --kubernetes-version ${{secrets.K8S_VERSION}} \
            --name ${{secrets.CLUSTER_NAME}} \
            --vcn-id $VCN_ID \
            --endpoint-public-ip-enabled true \
            --endpoint-subnet-id $PUBLIC_SUBNET_ID \
            --pods-cidr 10.244.0.0/16 \
            --services-cidr 10.96.0.0/16 \
            --service-lb-subnet-ids '[\"SVC_LB_SUBNET_ID\"]' \
            --query data.id \
            --raw-output"
          CMD=$(sed -e "s/\SVC_LB_SUBNET_ID/${SVC_LB_SUBNET_ID}/g" <<< $CMD)
          CLUSTER_ID=$(eval $(echo "$CMD"))
          
          sleep 10
          
          echo "Retrieve OKE cluster ID"
          CMD="oci ce cluster list \
            --compartment-id $COMPARTMENT_ID \
            --query 'data[?\"name\"==\`CLUSTER_NAME\` && \"lifecycle-state\"!=\`DELETED\`].id'"
          CMD=$(sed -e "s/\CLUSTER_NAME/${{secrets.CLUSTER_NAME}}/g" <<< $CMD)
          CLUSTER_ID=$(eval $(echo "$CMD | grep ocid | sed 's/\"//g' | sed 's/ //g'"))          
          echo "CLUSTER_ID=${CLUSTER_ID}" >> $GITHUB_ENV

          echo "Retrieve Image ID for ${{secrets.NODE_IMAGE}}"
          CMD="oci compute image list \
            --compartment-id $COMPARTMENT_ID 
            --all \
            --query 'data[?\"display-name\"==\`NODE_IMAGE\`].id'"
          CMD=$(sed -e "s/\NODE_IMAGE/${{secrets.NODE_IMAGE}}/g" <<< $CMD)
          NODE_IMAGE_ID=$(eval $(echo "$CMD | grep ocid | sed 's/\"//g' | sed 's/ //g'"))
          echo "NODE_IMAGE_ID=${NODE_IMAGE_ID}" >> $GITHUB_ENV
          
          echo "Retrieve Availability Domain Name"
          AD1=$( \
            oci iam availability-domain list \
              --compartment-id $COMPARTMENT_ID \
              --query 'data[*].name' | \
              grep -i $(echo ${{secrets.OCI_REGION}} | cut -d '-' -f 2) | \
                sed 's/"//g' | \
                sed 's/ //g' | \
                sed 's/,//g' | \
                sed -n 1p
          )
          echo "AD1=${AD1}" >> $GITHUB_ENV
          
          echo "Create Node Pool"
          NODE_POOL_NAME="wlsqa-nodepool"
          CMD="oci ce node-pool create \
            --cluster-id $CLUSTER_ID \
            --compartment-id $COMPARTMENT_ID \
            --kubernetes-version ${{secrets.K8S_VERSION}} \
            --name $NODE_POOL_NAME \
            --size ${{secrets.NODE_POOL_SIZE}} \
            --node-shape ${{secrets.NODE_SHAPE}} \
            --placement-configs '[{\"availabilityDomain\": \"AD1\", \"subnetId\": \"NODE_SUBNET_ID\"}]' \
            --node-image-id $NODE_IMAGE_ID"
          CMD=$(sed -e "s/\AD1/${AD1}/g" <<< $CMD)
          CMD=$(sed -e "s/\NODE_SUBNET_ID/${NODE_SUBNET_ID}/g" <<< $CMD)
          echo "oci ce node-pool create command: $CMD"
          eval $(echo "$CMD")       

      - name: Wait for OKE Cluster to be UP
        run: |          
          echo "Wait for around 15 minutes for the background setup to be completed..."

          echo "Check if the OKE cluster is ACTIVE"
          CMD="oci ce cluster list \
            --compartment-id $COMPARTMENT_ID \
            --query 'data[?\"name\"==\`CLUSTER_NAME\` && \"lifecycle-state\"==\`ACTIVE\`].id'"
          CMD=$(sed -e "s/\CLUSTER_NAME/${{secrets.CLUSTER_NAME}}/g" <<< $CMD)
          echo "CMD=${CMD}" >> $GITHUB_ENV
          
          CLUSTER_ID=$(eval $(echo "$CMD | grep ocid | sed 's/\"//g' | sed 's/ //g'"))
          echo "CLUSTER_ID=${CLUSTER_ID}" >> $GITHUB_ENV

          wait_time=$(date -ud "15 minute" +%s)
          while [[ -z "${CLUSTER_ID}" ]];
          do
              if [ $(date -u +%s) -gt $wait_time ];
              then
                  echo "OKE Cluster not created even after 15 mins !!"
                  exit 1
              fi
              echo "Waiting for OKE Cluster to become ACTIVE.."
              sleep 10s
              CLUSTER_ID=$(eval $(echo "$CMD | grep ocid | sed 's/\"//g' | sed 's/ //g'"))
              echo "CLUSTER_ID=${CLUSTER_ID}" >> $GITHUB_ENV
              if [ ! -z "$CLUSTER_ID" ];
              then
                  echo "OKE Cluster is ACTIVE now!!!"
              fi
          done

      - name: Wait for all nodes to become ACTIVE
        run: |          
          echo "Get NODE_POOL_ID"
          NODE_POOL_ID=$( \
            oci ce node-pool list \
              --compartment-id $COMPARTMENT_ID \
              --cluster-id $CLUSTER_ID \
              --query data[*].id | grep ocid | sed 's/\"//g' | sed 's/ //g' \
          )
          echo "NODE_POOL_ID=${NODE_POOL_ID}" >> $GITHUB_ENV

          echo "Check if all the nodes in cluster are ACTIVE"
          CMD="oci ce node-pool get \
            --node-pool-id $NODE_POOL_ID \
            --query 'data.nodes[?\"node-pool-id\"==\`NODE_POOL_ID\` && \"lifecycle-state\"==\`ACTIVE\`].id'"
          CMD=$(sed -e "s/\NODE_POOL_ID/${NODE_POOL_ID}/g" <<< $CMD)
          ACTIVE_NODES_COUNT=$(eval $(echo "$CMD | grep ocid | sed 's/\"//g' | sed 's/\,//g' | sed 's/ //g' | wc -l"))
          echo "ACTIVE_NODES_COUNT=${ACTIVE_NODES_COUNT}" >> $GITHUB_ENV

          echo "ACTIVE nodes count: $ACTIVE_NODES_COUNT"

          wait_time=$(date -ud "20 minute" +%s)
          while [[ "$ACTIVE_NODES_COUNT" != "${{secrets.NODE_POOL_SIZE}}" ]];
          do
              if [ $(date -u +%s) -gt $wait_time ];
              then
                  echo "Not all nodes become ACTIVE in 20 mins !!"
                  exit 1
              fi
              echo "Waiting for all nodes to become ACTIVE.."
              sleep 10s
              ACTIVE_NODES_COUNT=$(eval $(echo "$CMD | grep ocid | sed 's/\"//g' | sed 's/\,//g' | sed 's/ //g' | wc -l"))
              echo "ACTIVE_NODES_COUNT=${ACTIVE_NODES_COUNT}" >> $GITHUB_ENV
              if [[ "$ACTIVE_NODES_COUNT" == "${{secrets.NODE_POOL_SIZE}}" ]];
              then
                  echo "All nodes are ACTIVE now!!!"
              fi
          done

      - name: Checking Kubernetes Nodes Condition
        run: |
          # Sometimes, Node State may be ACTIVE, but Kubernetes Node Condition may not be ACTIVE
          echo "Checking the condition of the Kubernetes node, as indicated by the Kubernetes API server"
          
          mkdir -p ~/k8s_dir
          KUBECONFIG_FILE=/home/runner/k8s_dir/${{secrets.CLUSTER_NAME}}.conf
          rm -rf $KUBECONFIG_FILE

          oci ce cluster create-kubeconfig \
            --cluster-id $CLUSTER_ID \
            --file $KUBECONFIG_FILE \
            --region ${{secrets.OCI_REGION}} \
            --token-version 2.0.0 \
            --kube-endpoint PUBLIC_ENDPOINT

          KUBECONFIG=$KUBECONFIG_FILE
          echo "KUBECONFIG=${KUBECONFIG}" >> $GITHUB_ENV

          export KUBECONFIG=$KUBECONFIG
         
          kubectl version 
          kubectl get nodes -o wide
          K8S_API_STATE=$?
          echo "K8S_API_STATE=${K8S_API_STATE}" >> $GITHUB_ENV
          
          if [ "$K8S_API_STATE" != "0" ];
          then
              echo "Kubernetes Nodes Condition is not ACTIVE, let's wait..."
              wait_time=$(date -ud "10 minute" +%s)
              while [[ "$K8S_API_STATE" != "0" ]];
              do
                  if [ $(date -u +%s) -gt $wait_time ];
                  then
                      echo "K8s nodes condition has not become ACTIVE in 10 mins !!"
                      exit 1
                  fi
                  echo "Waiting for K8s nodes condition to become ACTIVE.."
                  sleep 10s
                  kubectl get nodes -o wide
                  K8S_API_STATE=$?
                  if [[ "$K8S_API_STATE" == "0" ]];
                  then
                      echo "K8s nodes condition is ACTIVE now!!!"
                  fi
              done
          fi          

  install_v8o:
    needs: create_oke_cluster
    runs-on: ubuntu-latest
    steps:
      - name: Write Config & Key Files
        run: |
          mkdir ~/.oci
          echo "[DEFAULT]" >> ~/.oci/config
          echo "user=${{secrets.OCI_USER_OCID}}" >> ~/.oci/config
          echo "fingerprint=${{secrets.OCI_FINGERPRINT}}" >> ~/.oci/config
          echo "region=${{secrets.OCI_REGION}}" >> ~/.oci/config
          echo "tenancy=${{secrets.OCI_TENANCY_OCID}}" >> ~/.oci/config
          echo "key_file=~/.oci/key.pem" >> ~/.oci/config
          echo "${{secrets.OCI_KEY_FILE}}" >> ~/.oci/key.pem
      - name: Install OCI CLI
        run: |
          curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          ./install.sh --accept-all-defaults
          echo "/home/runner/bin" >> $GITHUB_PATH
          exec -l $SHELL
      - name: 'Fix Config File Permissions'
        run: |
          oci setup repair-file-permissions --file ~/.oci/config
          oci setup repair-file-permissions --file ~/.oci/key.pem
      - name: Config KUBECONFIG
        run: |
          echo "Getting Compartment ID"
          CMD="oci iam compartment list \
            --compartment-id-in-subtree TRUE \
            --all \
            --query 'data[?\"name\"==\`COMPARTMENT_NAME\`].id'"
          CMD=$(sed -e "s/\COMPARTMENT_NAME/${{secrets.COMPARTMENT_NAME}}/g" <<< $CMD)
          COMPARTMENT_ID=$(eval $(echo "$CMD | grep ocid | sed 's/\"//g' | sed 's/ //g'"))
          echo "COMPARTMENT_ID=${COMPARTMENT_ID}" >> $GITHUB_ENV
          
          echo "Retrieve OKE cluster ID"
          CMD="oci ce cluster list \
            --compartment-id $COMPARTMENT_ID \
            --query 'data[?\"name\"==\`CLUSTER_NAME\` && \"lifecycle-state\"!=\`DELETED\`].id'"
          CMD=$(sed -e "s/\CLUSTER_NAME/${{secrets.CLUSTER_NAME}}/g" <<< $CMD)
          CLUSTER_ID=$(eval $(echo "$CMD | grep ocid | sed 's/\"//g' | sed 's/ //g'"))
          echo "CLUSTER_ID=${CLUSTER_ID}" >> $GITHUB_ENV

          mkdir ~/k8s_dir
          KUBECONFIG_FILE=/home/runner/k8s_dir/${{secrets.CLUSTER_NAME}}.conf
          rm -rf $KUBECONFIG_FILE

          oci ce cluster create-kubeconfig \
            --cluster-id $CLUSTER_ID \
            --file $KUBECONFIG_FILE \
            --region ${{secrets.OCI_REGION}} \
            --token-version 2.0.0 \
            --kube-endpoint PUBLIC_ENDPOINT

          KUBECONFIG=$KUBECONFIG_FILE
          echo "KUBECONFIG=${KUBECONFIG}" >> $GITHUB_ENV

          export KUBECONFIG=$KUBECONFIG
          kubectl version 
          kubectl get nodes -o wide
          
      - name: Install V8o
        run: |
          export KUBECONFIG=$KUBECONFIG
          echo "Install Verrazzano Platform Operator"
          kubectl apply -f https://github.com/verrazzano/verrazzano/releases/latest/download/operator.yaml

          echo "Waiting for VZ operator installation to be completed..."
          kubectl -n verrazzano-install rollout status deployment/verrazzano-platform-operator

          echo "Install Verrazzano using 'dev' profile"
          kubectl apply -f - <<EOF
          apiVersion: install.verrazzano.io/v1alpha1
          kind: Verrazzano
          metadata:
            name: verrazzano-admin
          spec:
            profile: ${{secrets.VZ_PROFILE}}
            components:
              dns:
                wildcard:
                  domain: nip.io
          EOF

          sleep 5

          VZ_STATE=$(kubectl get verrazzano | grep verrazzano-admin | awk {'print $2'})
          echo "VZ_STATE=${VZ_STATE}" >> $GITHUB_ENV
          echo "Verrazzano CRD status: $VZ_STATUS"

          wait_time=$(date -ud "20 minute" +%s)
          echo "wait_time=${wait_time}" >> $GITHUB_ENV
          
          while [[ "${VZ_STATE}" != "InstallComplete" ]];
          do
              if [ $(date -u +%s) -gt $wait_time ];
              then
                  echo "Verrazzano installation is not complete even after 20 mins !!"
                  exit 1
              fi
              echo "Waiting for Verrazzano installation to be completed..."
              sleep 20s
              VZ_STATE=$(kubectl get verrazzano | grep verrazzano-admin | awk {'print $2'})
          done

          echo "Verrazzano installation is complete!!!"
          kubectl get verrazzano
          
          echo "Get console URLs"
          kubectl get vz -o jsonpath="{.items[].status.instance}" | jq .

          VZ_CONSOLE_URL=$( \
            kubectl get ingress -n verrazzano-system 2>&1 | \
              grep verrazzano-ingress | \
              awk {'print $3'} \
          )
          echo "VZ_CONSOLE_URL=${VZ_CONSOLE_URL}" >> $GITHUB_ENV

          VZ_CONSOLE_STATUS=$(curl -s -I https://${VZ_CONSOLE_URL} | awk {'print $2'})
          echo "VZ_CONSOLE_STATUS=${VZ_CONSOLE_STATUS}" >> $GITHUB_ENV

          if [ "${VZ_CONSOLE_STATUS}" != "200" ];
          then
              echo "Error getting Verrazzano console!!!"
              exit 1
          fi

          echo "Verrazzano console is available at https://${VZ_CONSOLE_URL}"

          CONSOLE_PWD=$( \
            kubectl get secret \
              --namespace verrazzano-system verrazzano -o jsonpath={.data.password} | base64 --decode; echo \
          )
          echo "CONSOLE_PWD=${CONSOLE_PWD}" >> $GITHUB_ENV

          echo "============================================="
          echo "Verrazzano console password: ${CONSOLE_PWD}"
          echo "============================================="
          
      - name: Deploy Hello-Helidon on V8o
        run: |
          export KUBECONFIG=$KUBECONFIG
          echo "Deploy hello-helidon sample application on Verrazzano"

          kubectl create namespace hello-helidon
          kubectl label namespace hello-helidon verrazzano-managed=true istio-injection=enabled
          kubectl apply -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/hello-helidon/hello-helidon-comp.yaml
          kubectl apply -f https://raw.githubusercontent.com/verrazzano/verrazzano/master/examples/hello-helidon/hello-helidon-app.yaml

          sleep 5

          kubectl wait --for=condition=Ready pods --all -n hello-helidon --timeout=300s
          HOST=$( \
            kubectl get gateway hello-helidon-hello-helidon-appconf-gw \
              -n hello-helidon \
              -o jsonpath='{.spec.servers[0].hosts[0]}' \
          )
          echo "HOST=${HOST}" >> $GITHUB_ENV

          curl -sk -X GET "https://${HOST}/greet"
          
          curl -sk -X GET "https://${HOST}/greet" | grep "Hello World"
          result=$?
          echo $result

          if [ "${result}" != "0" ];
          then
              echo "Error deploying hello-helidon on Verrazzano!!!"
              exit 1
          fi

          echo "hello-helidon sample deployed on Verrazzano successfully!"
