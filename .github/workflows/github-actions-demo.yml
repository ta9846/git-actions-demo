name: GitHub Actions Demo
on: [push]
jobs:
  Explore-GitHub-Actions:
    runs-on: ubuntu-latest
    steps:
      - name: Write Config & Key Files
        run: |
          mkdir ~/.oci
          echo "[DEFAULT]" >> ~/.oci/config
          echo "user=${{secrets.OCI_USER_OCID}}" >> ~/.oci/config
          echo "fingerprint=${{secrets.OCI_FINGERPRINT}}" >> ~/.oci/config
          echo "region=${{secrets.OCI_REGION}}" >> ~/.oci/config
          echo "tenancy=${{secrets.OCI_TENANCY_OCID}}" >> ~/.oci/config
          echo "key_file=~/.oci/key.pem" >> ~/.oci/config
          echo "${{secrets.OCI_KEY_FILE}}" >> ~/.oci/key.pem
      - name: Install OCI CLI
        run: |
          curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          ./install.sh --accept-all-defaults
          echo "/home/runner/bin" >> $GITHUB_PATH
          exec -l $SHELL
      - name: 'Fix Config File Permissions'
        run: |
          oci setup repair-file-permissions --file ~/.oci/config
          oci setup repair-file-permissions --file ~/.oci/key.pem
      - name: Setting up Virtual Cloud Network (VCN)
        run: |
          echo "Setting up Virtual Cloud Network (VCN)"
          
          echo "Getting Compartment ID"
          CMD="oci iam compartment list --compartment-id-in-subtree TRUE --all --query 'data[?\"name\"==\`COMPARTMENT_NAME\`].id'"
          CMD=$(sed -e "s/\COMPARTMENT_NAME/${{secrets.COMPARTMENT_NAME}}/g" <<< $CMD)
          COMPARTMENT_ID=$(eval $(echo "$CMD | grep ocid | sed 's/\"//g' | sed 's/ //g'"))
          echo "COMPARTMENT_ID=${COMPARTMENT_ID}" >> $GITHUB_ENV
          echo $COMPARTMENT_ID
          
          echo "Create VCN"
          oci iam compartment list \
              --compartment-id-in-subtree TRUE \
              --all \
              --query 'data[?\"name\"==\`COMPARTMENT_NAME\`].id'
              
          echo "VCN_ID=${VCN_ID}" >> $GITHUB_ENV
          echo ${VCN_ID}

          echo "Create Internet Gateway"
          IGW_ID=$(oci network internet-gateway create --compartment-id $COMPARTMENT_ID --vcn-id $VCN_ID \
            --is-enabled true --display-name internet-gateway-oke --query data.id --raw-output)
          echo "IGW_ID=${IGW_ID}" >> $GITHUB_ENV

          echo "Retrieve default Route table of the VCN"
          echo "DRT="Default Route Table for " >> $GITHUB_ENV
          CMD="oci network route-table list --compartment-id $COMPARTMENT_ID --vcn-id $VCN_ID \
            --query 'data[?\"display-name\"==\`DEFAULT_ROUTE_TABLE_NAME\`].id'"
          CMD=$(sed -e "s/\DEFAULT_ROUTE_TABLE_NAME/${DRT}${{secrets.VCN_NAME}}/g" <<< $CMD)
          DEF_ROUTE_TABLE_ID=$(eval $(echo "$CMD | grep ocid | sed 's/\"//g' | sed 's/ //g' | sed 's/,//g'"))
          echo "DEF_ROUTE_TABLE_ID=${DEF_ROUTE_TABLE_ID}" >> $GITHUB_ENV

          echo "Update Default Route table with Internet Gateway"
          CMD="oci network route-table update --rt-id $DEF_ROUTE_TABLE_ID \
            --route-rules '[{\"cidrBlock\":\"0.0.0.0/0\",\"networkEntityId\":\"IGW_ID\"}]' --force"
          CMD=$(sed -e "s/\IGW_ID/${IGW_ID}/g" <<< $CMD)
          eval $(echo $CMD)
          
          echo "Create Security Ingress / Egress Rules for API Endpoint, Nodes and LB"
          oci network security-list create --compartment-id $COMPARTMENT_ID --vcn-id $VCN_ID \
            --display-name api-endpoint-sec-list --ingress-security-rules file:///home/runner/seclist/api-endpoint-sec-list_ingress.json \
            --egress-security-rules file:///home/runner/seclist/api-endpoint-sec-list_egress.json
          API_ENDPOINT_SEC_LIST_ID=$(oci network security-list list --compartment-id $COMPARTMENT_ID \
            --vcn-id $VCN_ID --query 'data[?"display-name"==`api-endpoint-sec-list`].id' | grep ocid | \
            sed 's/"//g' | sed 's/ //g' | sed 's/,//g')
          echo "API_ENDPOINT_SEC_LIST_ID=${API_ENDPOINT_SEC_LIST_ID}" >> $GITHUB_ENV


