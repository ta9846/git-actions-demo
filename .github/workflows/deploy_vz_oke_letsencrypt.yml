name: Deploy Verrazzano using Letsencrypt and OCI DNS
on:
  workflow_call:
    inputs:
      username:
        required: false
        type: string  
    secrets:
      OCI_USER_OCID:
        required: true
      OCI_FINGERPRINT:
        required: true
      OCI_REGION:
        required: true
      OCI_TENANCY_OCID:
        required: true
      OCI_KEY_FILE:
        required: true
      COMPARTMENT_NAME:
        required: true
      CLUSTER_NAME:
        required: true
      VZ_PROFILE:
        required: true
      VZ_INSTALLATION_NAME:
        required: true
      VZ_OCI_DNSZONE_COMPARTMENT_ID:
        required: true
      VZ_OCI_DNSZONE_ID:
        required: true
      VZ_OCI_DNSZONE_NAME:
        required: true
jobs:
  install_v8o:
    runs-on: ubuntu-latest
    steps:
      - name: Write Config & Key Files
        run: |
          mkdir ~/.oci
          echo "[DEFAULT]" >> ~/.oci/config
          echo "user=${{secrets.OCI_USER_OCID}}" >> ~/.oci/config
          echo "fingerprint=${{secrets.OCI_FINGERPRINT}}" >> ~/.oci/config
          echo "region=${{secrets.OCI_REGION}}" >> ~/.oci/config
          echo "tenancy=${{secrets.OCI_TENANCY_OCID}}" >> ~/.oci/config
          echo "key_file=~/.oci/key.pem" >> ~/.oci/config
          echo "${{secrets.OCI_KEY_FILE}}" >> ~/.oci/key.pem
      - name: Install OCI CLI
        run: |
          curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          ./install.sh --accept-all-defaults
          echo "/home/runner/bin" >> $GITHUB_PATH
          exec -l $SHELL
      - name: 'Fix Config File Permissions'
        run: |
          oci setup repair-file-permissions --file ~/.oci/config
          oci setup repair-file-permissions --file ~/.oci/key.pem
      - name: Config KUBECONFIG
        run: |
          echo "Getting Compartment ID"
          CMD="oci iam compartment list \
            --compartment-id-in-subtree TRUE \
            --all \
            --query 'data[?\"name\"==\`COMPARTMENT_NAME\`].id'"
          CMD=$(sed -e "s/\COMPARTMENT_NAME/${{secrets.COMPARTMENT_NAME}}/g" <<< $CMD)
          COMPARTMENT_ID=$(eval $(echo "$CMD | grep ocid | sed 's/\"//g' | sed 's/ //g'"))
          echo "COMPARTMENT_ID=${COMPARTMENT_ID}" >> $GITHUB_ENV
          
          echo "Retrieve OKE cluster ID"
          CMD="oci ce cluster list \
            --compartment-id $COMPARTMENT_ID \
            --query 'data[?\"name\"==\`CLUSTER_NAME\` && \"lifecycle-state\"!=\`DELETED\`].id'"
          CMD=$(sed -e "s/\CLUSTER_NAME/${{secrets.CLUSTER_NAME}}/g" <<< $CMD)
          CLUSTER_ID=$(eval $(echo "$CMD | grep ocid | sed 's/\"//g' | sed 's/ //g'"))
          echo "CLUSTER_ID=${CLUSTER_ID}" >> $GITHUB_ENV

          mkdir ~/k8s_dir
          KUBECONFIG_FILE=/home/runner/k8s_dir/${{secrets.CLUSTER_NAME}}.conf
          rm -rf $KUBECONFIG_FILE

          oci ce cluster create-kubeconfig \
            --cluster-id $CLUSTER_ID \
            --file $KUBECONFIG_FILE \
            --region ${{secrets.OCI_REGION}} \
            --token-version 2.0.0 \
            --kube-endpoint PUBLIC_ENDPOINT

          KUBECONFIG=$KUBECONFIG_FILE
          echo "KUBECONFIG=${KUBECONFIG}" >> $GITHUB_ENV

          export KUBECONFIG=$KUBECONFIG
          kubectl version 
          kubectl get nodes -o wide
          
      - name: Install V8o
        run: |
          export KUBECONFIG=$KUBECONFIG
          echo "Install Verrazzano Platform Operator"
          kubectl apply -f https://github.com/verrazzano/verrazzano/releases/download/v1.0.1/operator.yaml

          echo "Waiting for VZ operator installation to be completed..."
          kubectl -n verrazzano-install rollout status deployment/verrazzano-platform-operator
          
          kubectl get verrazzano

          cd /home/runner
          git clone https://github.com/verrazzano/verrazzano.git
          cd verrazzano/platform-operator/scripts/install
          sed -i 's/$VERRAZZANO_INSTALL_NS/default/g' create_oci_config_secret.sh

          export KUBE_CONTEXT=$(kubectl config get-contexts -o=name)
          echo "KUBE_CONTEXT=${KUBE_CONTEXT}" >> $GITHUB_ENV
          echo "Current kube context===> $KUBE_CONTEXT"
          
          ./create_oci_config_secret.sh -o ~/.oci/config -s DEFAULT -k oci -c $KUBE_CONTEXT
          
          sleep 10
          kubectl get secrets
          
          echo "Install Verrazzano with Letsencrypt using '${{secrets.VZ_PROFILE}}' profile"

          kubectl apply -f - <<EOF
          apiVersion: install.verrazzano.io/v1alpha1
          kind: Verrazzano
          metadata:
            name: ${{secrets.VZ_INSTALLATION_NAME}}
          spec:
            profile: dev
            environmentName: ${{secrets.VZ_DNSZONE_PREFIX}}
            components:
              certManager:
                certificate:
                  acme:
                    provider: letsEncrypt
                    emailAddress: ${{secrets.VZ_ACME_EMAIL}}
                    environment: staging
              dns:
                oci:
                  ociConfigSecret: oci
                  dnsZoneCompartmentOCID: ${{secrets.VZ_OCI_DNSZONE_COMPARTMENT_ID}}
                  dnsZoneOCID: ${{secrets.VZ_OCI_DNSZONE_ID}}
                  dnsZoneName: ${{secrets.VZ_OCI_DNSZONE_NAME}}
          EOF

          sleep 5
          
          kubectl get verrazzano

          VZ_STATE=$(kubectl get verrazzano | grep ${{secrets.VZ_INSTALLATION_NAME}} | awk {'print $2'})
          echo "VZ_STATE=${VZ_STATE}" >> $GITHUB_ENV
          echo "Verrazzano CRD status: $VZ_STATUS"

          wait_time=$(date -ud "45 minute" +%s)
          echo "wait_time=${wait_time}" >> $GITHUB_ENV
          echo "wait_time: $wait_time"
          echo "vz_state: $VZ_STATE"
          
          while [[ "${VZ_STATE}" != "InstallComplete" ]];
          do
              if [ $(date -u +%s) -gt $wait_time ];
              then
                  echo "Verrazzano installation is not complete even after 45 mins !!"
                  exit 1
              fi
              echo "Waiting for Verrazzano installation to be completed..."
              sleep 20s
              kubectl get verrazzano
              VZ_STATE=$(kubectl get verrazzano | grep ${{secrets.VZ_INSTALLATION_NAME}} | awk {'print $2'})
              echo "VZ_STATE=${VZ_STATE}" >> $GITHUB_ENV

              if [ "${VZ_STATE}" == "InstallFailed" ];
              then
                echo "Verrazzano installation failed!"
                kubectl logs -f $(kubectl get pods | grep verrazzano-install |  awk {'print $1'})
                exit 1
              fi
              
          done

          echo "=================================================="
          echo "Verrazzano installation completed!"
          kubectl get verrazzano
          echo "=================================================="
          
          echo "Get console URLs"
          kubectl get vz -o jsonpath="{.items[].status.instance}" | jq .

          VZ_CONSOLE_URL=$( \
            kubectl get ingress -n verrazzano-system 2>&1 | \
              grep verrazzano-ingress | \
              awk {'print $3'} \
          )
          echo "$VZ_CONSOLE_URL=${VZ_CONSOLE_URL}" >> $GITHUB_ENV

          CONSOLE_PWD=$( \
            kubectl get secret \
              --namespace verrazzano-system verrazzano -o jsonpath={.data.password} | base64 --decode; echo \
          )
          echo "CONSOLE_PWD=${CONSOLE_PWD}" >> $GITHUB_ENV

          VZ_CONSOLE_STATUS=$(curl -k -s -I https://${VZ_CONSOLE_URL} | awk {'print $2'} | head -n 1)

          echo "VZ_CONSOLE_STATUS=${VZ_CONSOLE_STATUS}" >> $GITHUB_ENV
          echo "vz_console_status: $VZ_CONSOLE_STATUS"
          if [ "${VZ_CONSOLE_STATUS}" != "200" ];
          then
            echo "Error getting Verrazzano console!!!"
            exit 1
          fi

          echo "============================================="
          echo "Verrazzano console url: https://${VZ_CONSOLE_URL}"
          echo "Verrazzano console password: ${CONSOLE_PWD}"
          echo "============================================="
          
